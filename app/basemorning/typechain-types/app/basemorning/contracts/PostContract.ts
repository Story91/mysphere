/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface PostContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createPost"
      | "getPostCount"
      | "totalPosts"
      | "userPostCount"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PostCreated"): EventFragment;

  encodeFunctionData(functionFragment: "createPost", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPostCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPosts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userPostCount",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "createPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPostCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPosts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userPostCount",
    data: BytesLike
  ): Result;
}

export namespace PostCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    contentHash: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    contentHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    creator: string;
    contentHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PostContract extends BaseContract {
  connect(runner?: ContractRunner | null): PostContract;
  waitForDeployment(): Promise<this>;

  interface: PostContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPost: TypedContractMethod<[contentHash: string], [void], "nonpayable">;

  getPostCount: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  totalPosts: TypedContractMethod<[], [bigint], "view">;

  userPostCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPost"
  ): TypedContractMethod<[contentHash: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPostCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPosts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userPostCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "PostCreated"
  ): TypedContractEvent<
    PostCreatedEvent.InputTuple,
    PostCreatedEvent.OutputTuple,
    PostCreatedEvent.OutputObject
  >;

  filters: {
    "PostCreated(address,string,uint256)": TypedContractEvent<
      PostCreatedEvent.InputTuple,
      PostCreatedEvent.OutputTuple,
      PostCreatedEvent.OutputObject
    >;
    PostCreated: TypedContractEvent<
      PostCreatedEvent.InputTuple,
      PostCreatedEvent.OutputTuple,
      PostCreatedEvent.OutputObject
    >;
  };
}
