/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface BaseMorningGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ALLIANCE_CREATE_COST"
      | "CHECK_IN_COOLDOWN"
      | "DAILY_XP"
      | "MAX_ALLIANCE_MEMBERS"
      | "PVP_COOLDOWN"
      | "STREAK_RESET_TIME"
      | "achievements"
      | "alliances"
      | "calculateXPReward"
      | "cancelTrade"
      | "checkIn"
      | "checkLevelUpEligibility"
      | "completeMission"
      | "completeTrade"
      | "createAlliance"
      | "createEvent"
      | "createMission"
      | "createTrade"
      | "endEvent"
      | "events"
      | "fuseElements"
      | "getActiveEvents"
      | "getMintChance"
      | "getPlayerAchievements"
      | "initializeAchievements"
      | "initiatePvpBattle"
      | "joinAlliance"
      | "leaveAlliance"
      | "levelRequirements"
      | "levelUp"
      | "missions"
      | "nftContract"
      | "owner"
      | "playerMissions"
      | "players"
      | "rawFulfillRandomWords"
      | "register"
      | "renounceOwnership"
      | "startMission"
      | "totalAchievements"
      | "totalAlliances"
      | "totalEvents"
      | "totalMissions"
      | "totalTrades"
      | "trades"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AchievementCompleted"
      | "AllianceCreated"
      | "AllianceJoined"
      | "AllianceLeft"
      | "BaseLevelUp"
      | "CheckInCompleted"
      | "ElementFused"
      | "EventEnded"
      | "EventStarted"
      | "MissionCompleted"
      | "MissionStarted"
      | "OwnershipTransferred"
      | "PlayerRegistered"
      | "PvpBattleCompleted"
      | "TradeCancelled"
      | "TradeCompleted"
      | "TradeCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ALLIANCE_CREATE_COST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHECK_IN_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DAILY_XP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_ALLIANCE_MEMBERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PVP_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STREAK_RESET_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "achievements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "alliances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateXPReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "checkIn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkLevelUpEligibility",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeMission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAlliance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMission",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createTrade",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fuseElements",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintChance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerAchievements",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeAchievements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiatePvpBattle",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "joinAlliance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveAlliance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "levelRequirements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "levelUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "missions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerMissions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "register", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startMission",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAchievements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAlliances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalMissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTrades",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trades",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ALLIANCE_CREATE_COST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHECK_IN_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DAILY_XP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ALLIANCE_MEMBERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PVP_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STREAK_RESET_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "achievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "alliances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateXPReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkLevelUpEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeMission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAlliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endEvent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fuseElements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintChance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerAchievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeAchievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiatePvpBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinAlliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaveAlliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "levelRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levelUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "missions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerMissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startMission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAchievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAlliances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trades", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AchievementCompletedEvent {
  export type InputTuple = [player: AddressLike, achievementId: BigNumberish];
  export type OutputTuple = [player: string, achievementId: bigint];
  export interface OutputObject {
    player: string;
    achievementId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllianceCreatedEvent {
  export type InputTuple = [
    allianceId: BigNumberish,
    name: string,
    leader: AddressLike
  ];
  export type OutputTuple = [allianceId: bigint, name: string, leader: string];
  export interface OutputObject {
    allianceId: bigint;
    name: string;
    leader: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllianceJoinedEvent {
  export type InputTuple = [allianceId: BigNumberish, member: AddressLike];
  export type OutputTuple = [allianceId: bigint, member: string];
  export interface OutputObject {
    allianceId: bigint;
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllianceLeftEvent {
  export type InputTuple = [allianceId: BigNumberish, member: AddressLike];
  export type OutputTuple = [allianceId: bigint, member: string];
  export interface OutputObject {
    allianceId: bigint;
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseLevelUpEvent {
  export type InputTuple = [player: AddressLike, newLevel: BigNumberish];
  export type OutputTuple = [player: string, newLevel: bigint];
  export interface OutputObject {
    player: string;
    newLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CheckInCompletedEvent {
  export type InputTuple = [
    player: AddressLike,
    streak: BigNumberish,
    xpEarned: BigNumberish
  ];
  export type OutputTuple = [player: string, streak: bigint, xpEarned: bigint];
  export interface OutputObject {
    player: string;
    streak: bigint;
    xpEarned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ElementFusedEvent {
  export type InputTuple = [
    player: AddressLike,
    burnedTokenIds: BigNumberish[],
    newTokenId: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    burnedTokenIds: bigint[],
    newTokenId: bigint
  ];
  export interface OutputObject {
    player: string;
    burnedTokenIds: bigint[];
    newTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventEndedEvent {
  export type InputTuple = [eventId: BigNumberish];
  export type OutputTuple = [eventId: bigint];
  export interface OutputObject {
    eventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventStartedEvent {
  export type InputTuple = [eventId: BigNumberish, name: string];
  export type OutputTuple = [eventId: bigint, name: string];
  export interface OutputObject {
    eventId: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MissionCompletedEvent {
  export type InputTuple = [
    player: AddressLike,
    missionId: BigNumberish,
    xpEarned: BigNumberish,
    resourcesEarned: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    missionId: bigint,
    xpEarned: bigint,
    resourcesEarned: bigint
  ];
  export interface OutputObject {
    player: string;
    missionId: bigint;
    xpEarned: bigint;
    resourcesEarned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MissionStartedEvent {
  export type InputTuple = [player: AddressLike, missionId: BigNumberish];
  export type OutputTuple = [player: string, missionId: bigint];
  export interface OutputObject {
    player: string;
    missionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRegisteredEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PvpBattleCompletedEvent {
  export type InputTuple = [
    winner: AddressLike,
    loser: AddressLike,
    xpEarned: BigNumberish
  ];
  export type OutputTuple = [winner: string, loser: string, xpEarned: bigint];
  export interface OutputObject {
    winner: string;
    loser: string;
    xpEarned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeCancelledEvent {
  export type InputTuple = [tradeId: BigNumberish];
  export type OutputTuple = [tradeId: bigint];
  export interface OutputObject {
    tradeId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeCompletedEvent {
  export type InputTuple = [tradeId: BigNumberish, buyer: AddressLike];
  export type OutputTuple = [tradeId: bigint, buyer: string];
  export interface OutputObject {
    tradeId: bigint;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeCreatedEvent {
  export type InputTuple = [
    tradeId: BigNumberish,
    seller: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    tradeId: bigint,
    seller: string,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    tradeId: bigint;
    seller: string;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BaseMorningGame extends BaseContract {
  connect(runner?: ContractRunner | null): BaseMorningGame;
  waitForDeployment(): Promise<this>;

  interface: BaseMorningGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ALLIANCE_CREATE_COST: TypedContractMethod<[], [bigint], "view">;

  CHECK_IN_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  DAILY_XP: TypedContractMethod<[], [bigint], "view">;

  MAX_ALLIANCE_MEMBERS: TypedContractMethod<[], [bigint], "view">;

  PVP_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  STREAK_RESET_TIME: TypedContractMethod<[], [bigint], "view">;

  achievements: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        name: string;
        description: string;
        requirement: bigint;
        xpReward: bigint;
        resourceReward: bigint;
        achievementType: bigint;
      }
    ],
    "view"
  >;

  alliances: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        name: string;
        leader: string;
        totalPower: bigint;
        level: bigint;
        resources: bigint;
      }
    ],
    "view"
  >;

  calculateXPReward: TypedContractMethod<
    [streak: BigNumberish],
    [bigint],
    "view"
  >;

  cancelTrade: TypedContractMethod<
    [tradeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkIn: TypedContractMethod<[], [void], "nonpayable">;

  checkLevelUpEligibility: TypedContractMethod<
    [player: AddressLike],
    [boolean],
    "view"
  >;

  completeMission: TypedContractMethod<
    [missionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeTrade: TypedContractMethod<
    [tradeId: BigNumberish],
    [void],
    "payable"
  >;

  createAlliance: TypedContractMethod<[name: string], [void], "nonpayable">;

  createEvent: TypedContractMethod<
    [
      name: string,
      duration: BigNumberish,
      xpMultiplier: BigNumberish,
      resourceMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createMission: TypedContractMethod<
    [
      name: string,
      duration: BigNumberish,
      xpReward: BigNumberish,
      resourceReward: BigNumberish,
      minBaseLevel: BigNumberish,
      requiredElements: BigNumberish,
      requiredElementType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createTrade: TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  endEvent: TypedContractMethod<[eventId: BigNumberish], [void], "nonpayable">;

  events: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        name: string;
        startTime: bigint;
        endTime: bigint;
        xpMultiplier: bigint;
        resourceMultiplier: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  fuseElements: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getActiveEvents: TypedContractMethod<[], [bigint[]], "view">;

  getMintChance: TypedContractMethod<
    [baseLevel: BigNumberish],
    [bigint],
    "view"
  >;

  getPlayerAchievements: TypedContractMethod<
    [player: AddressLike],
    [bigint[]],
    "view"
  >;

  initializeAchievements: TypedContractMethod<[], [void], "nonpayable">;

  initiatePvpBattle: TypedContractMethod<
    [opponent: AddressLike, elementIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  joinAlliance: TypedContractMethod<
    [allianceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  leaveAlliance: TypedContractMethod<[], [void], "nonpayable">;

  levelRequirements: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        elementCount: bigint;
        minElementLevel: bigint;
        requiredXP: bigint;
      }
    ],
    "view"
  >;

  levelUp: TypedContractMethod<[], [void], "nonpayable">;

  missions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        name: string;
        duration: bigint;
        xpReward: bigint;
        resourceReward: bigint;
        minBaseLevel: bigint;
        requiredElements: bigint;
        requiredElementType: bigint;
      }
    ],
    "view"
  >;

  nftContract: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  playerMissions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        xp: bigint;
        lastCheckIn: bigint;
        streak: bigint;
        baseLevel: bigint;
        isActive: boolean;
        lastPvpBattle: bigint;
        pvpWins: bigint;
        resources: bigint;
        allianceId: bigint;
      }
    ],
    "view"
  >;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  register: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  startMission: TypedContractMethod<
    [missionId: BigNumberish, elementIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  totalAchievements: TypedContractMethod<[], [bigint], "view">;

  totalAlliances: TypedContractMethod<[], [bigint], "view">;

  totalEvents: TypedContractMethod<[], [bigint], "view">;

  totalMissions: TypedContractMethod<[], [bigint], "view">;

  totalTrades: TypedContractMethod<[], [bigint], "view">;

  trades: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        seller: string;
        tokenId: bigint;
        price: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ALLIANCE_CREATE_COST"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CHECK_IN_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DAILY_XP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_ALLIANCE_MEMBERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PVP_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STREAK_RESET_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "achievements"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        name: string;
        description: string;
        requirement: bigint;
        xpReward: bigint;
        resourceReward: bigint;
        achievementType: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "alliances"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        name: string;
        leader: string;
        totalPower: bigint;
        level: bigint;
        resources: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateXPReward"
  ): TypedContractMethod<[streak: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelTrade"
  ): TypedContractMethod<[tradeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkIn"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkLevelUpEligibility"
  ): TypedContractMethod<[player: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "completeMission"
  ): TypedContractMethod<[missionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeTrade"
  ): TypedContractMethod<[tradeId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createAlliance"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<
    [
      name: string,
      duration: BigNumberish,
      xpMultiplier: BigNumberish,
      resourceMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMission"
  ): TypedContractMethod<
    [
      name: string,
      duration: BigNumberish,
      xpReward: BigNumberish,
      resourceReward: BigNumberish,
      minBaseLevel: BigNumberish,
      requiredElements: BigNumberish,
      requiredElementType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTrade"
  ): TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endEvent"
  ): TypedContractMethod<[eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "events"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        name: string;
        startTime: bigint;
        endTime: bigint;
        xpMultiplier: bigint;
        resourceMultiplier: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fuseElements"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveEvents"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getMintChance"
  ): TypedContractMethod<[baseLevel: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerAchievements"
  ): TypedContractMethod<[player: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "initializeAchievements"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initiatePvpBattle"
  ): TypedContractMethod<
    [opponent: AddressLike, elementIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinAlliance"
  ): TypedContractMethod<[allianceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "leaveAlliance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "levelRequirements"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        elementCount: bigint;
        minElementLevel: bigint;
        requiredXP: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "levelUp"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "missions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        name: string;
        duration: bigint;
        xpReward: bigint;
        resourceReward: bigint;
        minBaseLevel: bigint;
        requiredElements: bigint;
        requiredElementType: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerMissions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        xp: bigint;
        lastCheckIn: bigint;
        streak: bigint;
        baseLevel: bigint;
        isActive: boolean;
        lastPvpBattle: bigint;
        pvpWins: bigint;
        resources: bigint;
        allianceId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startMission"
  ): TypedContractMethod<
    [missionId: BigNumberish, elementIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalAchievements"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalAlliances"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalEvents"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalMissions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTrades"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "trades"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        seller: string;
        tokenId: bigint;
        price: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AchievementCompleted"
  ): TypedContractEvent<
    AchievementCompletedEvent.InputTuple,
    AchievementCompletedEvent.OutputTuple,
    AchievementCompletedEvent.OutputObject
  >;
  getEvent(
    key: "AllianceCreated"
  ): TypedContractEvent<
    AllianceCreatedEvent.InputTuple,
    AllianceCreatedEvent.OutputTuple,
    AllianceCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AllianceJoined"
  ): TypedContractEvent<
    AllianceJoinedEvent.InputTuple,
    AllianceJoinedEvent.OutputTuple,
    AllianceJoinedEvent.OutputObject
  >;
  getEvent(
    key: "AllianceLeft"
  ): TypedContractEvent<
    AllianceLeftEvent.InputTuple,
    AllianceLeftEvent.OutputTuple,
    AllianceLeftEvent.OutputObject
  >;
  getEvent(
    key: "BaseLevelUp"
  ): TypedContractEvent<
    BaseLevelUpEvent.InputTuple,
    BaseLevelUpEvent.OutputTuple,
    BaseLevelUpEvent.OutputObject
  >;
  getEvent(
    key: "CheckInCompleted"
  ): TypedContractEvent<
    CheckInCompletedEvent.InputTuple,
    CheckInCompletedEvent.OutputTuple,
    CheckInCompletedEvent.OutputObject
  >;
  getEvent(
    key: "ElementFused"
  ): TypedContractEvent<
    ElementFusedEvent.InputTuple,
    ElementFusedEvent.OutputTuple,
    ElementFusedEvent.OutputObject
  >;
  getEvent(
    key: "EventEnded"
  ): TypedContractEvent<
    EventEndedEvent.InputTuple,
    EventEndedEvent.OutputTuple,
    EventEndedEvent.OutputObject
  >;
  getEvent(
    key: "EventStarted"
  ): TypedContractEvent<
    EventStartedEvent.InputTuple,
    EventStartedEvent.OutputTuple,
    EventStartedEvent.OutputObject
  >;
  getEvent(
    key: "MissionCompleted"
  ): TypedContractEvent<
    MissionCompletedEvent.InputTuple,
    MissionCompletedEvent.OutputTuple,
    MissionCompletedEvent.OutputObject
  >;
  getEvent(
    key: "MissionStarted"
  ): TypedContractEvent<
    MissionStartedEvent.InputTuple,
    MissionStartedEvent.OutputTuple,
    MissionStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRegistered"
  ): TypedContractEvent<
    PlayerRegisteredEvent.InputTuple,
    PlayerRegisteredEvent.OutputTuple,
    PlayerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "PvpBattleCompleted"
  ): TypedContractEvent<
    PvpBattleCompletedEvent.InputTuple,
    PvpBattleCompletedEvent.OutputTuple,
    PvpBattleCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TradeCancelled"
  ): TypedContractEvent<
    TradeCancelledEvent.InputTuple,
    TradeCancelledEvent.OutputTuple,
    TradeCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TradeCompleted"
  ): TypedContractEvent<
    TradeCompletedEvent.InputTuple,
    TradeCompletedEvent.OutputTuple,
    TradeCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TradeCreated"
  ): TypedContractEvent<
    TradeCreatedEvent.InputTuple,
    TradeCreatedEvent.OutputTuple,
    TradeCreatedEvent.OutputObject
  >;

  filters: {
    "AchievementCompleted(address,uint256)": TypedContractEvent<
      AchievementCompletedEvent.InputTuple,
      AchievementCompletedEvent.OutputTuple,
      AchievementCompletedEvent.OutputObject
    >;
    AchievementCompleted: TypedContractEvent<
      AchievementCompletedEvent.InputTuple,
      AchievementCompletedEvent.OutputTuple,
      AchievementCompletedEvent.OutputObject
    >;

    "AllianceCreated(uint256,string,address)": TypedContractEvent<
      AllianceCreatedEvent.InputTuple,
      AllianceCreatedEvent.OutputTuple,
      AllianceCreatedEvent.OutputObject
    >;
    AllianceCreated: TypedContractEvent<
      AllianceCreatedEvent.InputTuple,
      AllianceCreatedEvent.OutputTuple,
      AllianceCreatedEvent.OutputObject
    >;

    "AllianceJoined(uint256,address)": TypedContractEvent<
      AllianceJoinedEvent.InputTuple,
      AllianceJoinedEvent.OutputTuple,
      AllianceJoinedEvent.OutputObject
    >;
    AllianceJoined: TypedContractEvent<
      AllianceJoinedEvent.InputTuple,
      AllianceJoinedEvent.OutputTuple,
      AllianceJoinedEvent.OutputObject
    >;

    "AllianceLeft(uint256,address)": TypedContractEvent<
      AllianceLeftEvent.InputTuple,
      AllianceLeftEvent.OutputTuple,
      AllianceLeftEvent.OutputObject
    >;
    AllianceLeft: TypedContractEvent<
      AllianceLeftEvent.InputTuple,
      AllianceLeftEvent.OutputTuple,
      AllianceLeftEvent.OutputObject
    >;

    "BaseLevelUp(address,uint8)": TypedContractEvent<
      BaseLevelUpEvent.InputTuple,
      BaseLevelUpEvent.OutputTuple,
      BaseLevelUpEvent.OutputObject
    >;
    BaseLevelUp: TypedContractEvent<
      BaseLevelUpEvent.InputTuple,
      BaseLevelUpEvent.OutputTuple,
      BaseLevelUpEvent.OutputObject
    >;

    "CheckInCompleted(address,uint256,uint256)": TypedContractEvent<
      CheckInCompletedEvent.InputTuple,
      CheckInCompletedEvent.OutputTuple,
      CheckInCompletedEvent.OutputObject
    >;
    CheckInCompleted: TypedContractEvent<
      CheckInCompletedEvent.InputTuple,
      CheckInCompletedEvent.OutputTuple,
      CheckInCompletedEvent.OutputObject
    >;

    "ElementFused(address,uint256[],uint256)": TypedContractEvent<
      ElementFusedEvent.InputTuple,
      ElementFusedEvent.OutputTuple,
      ElementFusedEvent.OutputObject
    >;
    ElementFused: TypedContractEvent<
      ElementFusedEvent.InputTuple,
      ElementFusedEvent.OutputTuple,
      ElementFusedEvent.OutputObject
    >;

    "EventEnded(uint256)": TypedContractEvent<
      EventEndedEvent.InputTuple,
      EventEndedEvent.OutputTuple,
      EventEndedEvent.OutputObject
    >;
    EventEnded: TypedContractEvent<
      EventEndedEvent.InputTuple,
      EventEndedEvent.OutputTuple,
      EventEndedEvent.OutputObject
    >;

    "EventStarted(uint256,string)": TypedContractEvent<
      EventStartedEvent.InputTuple,
      EventStartedEvent.OutputTuple,
      EventStartedEvent.OutputObject
    >;
    EventStarted: TypedContractEvent<
      EventStartedEvent.InputTuple,
      EventStartedEvent.OutputTuple,
      EventStartedEvent.OutputObject
    >;

    "MissionCompleted(address,uint256,uint256,uint256)": TypedContractEvent<
      MissionCompletedEvent.InputTuple,
      MissionCompletedEvent.OutputTuple,
      MissionCompletedEvent.OutputObject
    >;
    MissionCompleted: TypedContractEvent<
      MissionCompletedEvent.InputTuple,
      MissionCompletedEvent.OutputTuple,
      MissionCompletedEvent.OutputObject
    >;

    "MissionStarted(address,uint256)": TypedContractEvent<
      MissionStartedEvent.InputTuple,
      MissionStartedEvent.OutputTuple,
      MissionStartedEvent.OutputObject
    >;
    MissionStarted: TypedContractEvent<
      MissionStartedEvent.InputTuple,
      MissionStartedEvent.OutputTuple,
      MissionStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlayerRegistered(address)": TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
    PlayerRegistered: TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;

    "PvpBattleCompleted(address,address,uint256)": TypedContractEvent<
      PvpBattleCompletedEvent.InputTuple,
      PvpBattleCompletedEvent.OutputTuple,
      PvpBattleCompletedEvent.OutputObject
    >;
    PvpBattleCompleted: TypedContractEvent<
      PvpBattleCompletedEvent.InputTuple,
      PvpBattleCompletedEvent.OutputTuple,
      PvpBattleCompletedEvent.OutputObject
    >;

    "TradeCancelled(uint256)": TypedContractEvent<
      TradeCancelledEvent.InputTuple,
      TradeCancelledEvent.OutputTuple,
      TradeCancelledEvent.OutputObject
    >;
    TradeCancelled: TypedContractEvent<
      TradeCancelledEvent.InputTuple,
      TradeCancelledEvent.OutputTuple,
      TradeCancelledEvent.OutputObject
    >;

    "TradeCompleted(uint256,address)": TypedContractEvent<
      TradeCompletedEvent.InputTuple,
      TradeCompletedEvent.OutputTuple,
      TradeCompletedEvent.OutputObject
    >;
    TradeCompleted: TypedContractEvent<
      TradeCompletedEvent.InputTuple,
      TradeCompletedEvent.OutputTuple,
      TradeCompletedEvent.OutputObject
    >;

    "TradeCreated(uint256,address,uint256,uint256)": TypedContractEvent<
      TradeCreatedEvent.InputTuple,
      TradeCreatedEvent.OutputTuple,
      TradeCreatedEvent.OutputObject
    >;
    TradeCreated: TypedContractEvent<
      TradeCreatedEvent.InputTuple,
      TradeCreatedEvent.OutputTuple,
      TradeCreatedEvent.OutputObject
    >;
  };
}
